Create database Clipboard_Health

create table Sales (Sales_id int primary key,Customer_id int,Product_id int,Sale_date date,Quantity int,Total_amount decimal)

INSERT INTO Sales 
VALUES
(1, 1, 1, '2023-01-10', 2, 500.00),
(2, 1, 2, '2023-02-11', 1, 300.00),
(3, 2, 3, '2023-05-05', 3, 900.00),
(4, 2, 4, '2023-06-25', 1, 200.00),
(5, 3, 5, '2023-07-07', 4, 600.00),
(6, 3, 6, '2023-08-03', 2, 400.00),
(7, 4, 1, '2023-03-18', 5, 1000.00),
(8, 4, 7, '2023-04-01', 3, 600.00),
(9, 5, 8, '2023-02-25', 2, 500.00),
(10, 6, 9, '2023-09-10', 1, 250.00);


create table Customers (customer_id INT primary key,
customer_name VARCHAR(50),
sales_region VARCHAR(100),
sign_up_date DATE)

INSERT INTO  Customers values
(1, 'John Doe', 'West', '2023-01-15'),
(2, 'Jane Smith', 'East', '2022-12-10'),
(3, 'Emily Johnson', 'West', '2023-07-20'),
(4, 'Michael Brown', 'North', '2023-03-22'),
(5, 'Sarah Williams', 'South', '2022-05-13'),
(6, 'David Lee', 'West', '2023-09-01'),
(7, 'Susan Clark', 'East', '2023-06-17'),
(8, 'Robert King', 'North', '2023-04-05'),
(9, 'Lily Harris', 'South', '2023-02-18'),
(10, 'James Turner', 'West', '2023-08-09');

create table Products(
product_id INT primary key,
product_name VARCHAR(50),
category VARCHAR(50),
price DECIMAL)

INSERT INTO Products 
VALUES 
(1, 'Luxury TV', 'Electronics', 55000.00),
(2, 'High-End Laptop', 'Electronics', 75000.00),
(3, 'Premium Sofa', 'Furniture', 60000.00),
(4, 'Luxury Watch', 'Accessories', 85000.00),
(5, 'Designer Bag', 'Accessories', 70000.00),
(6, 'Luxury Car', 'Vehicles', 200000.00),
(7, 'Fine Art Painting', 'Art', 120000.00),
(8, 'Gold Necklace', 'Jewelry', 100000.00),
(9, 'Exclusive Chair', 'Furniture', 55000.00),
(10, 'High-End Refrigerator', 'Electronics', 60000.00)
;

UPDATE Sales
SET sale_date = DATEADD(DAY, -15, GETDATE())  -- Set a date within the last 30 days
WHERE sales_id = 1;  -- Update a specific row


select * from Sales
select * from Products
select * from Customers

/*
QUESTION NUMBER 1

Write a query to return the customer_name, product_name, and total_amount for each sale in the last 30 days
*/

SELECT 
    c.customer_name, 
    p.product_name, 
    s.total_amount
FROM Sales s
JOIN Customers c ON s.customer_id = c.customer_id
JOIN Products p ON s.product_id = p.product_id
WHERE s.sale_date >= DATEADD(DAY, -30, GETDATE());


/*
Write a query to find the total revenue generated by each product category in the last year. 
The output should include the product category and the total revenue for that category.
*/


SELECT 
    p.category AS product_category, 
    SUM(s.total_amount) AS total_revenue
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
WHERE s.sale_date >= DATEADD(YEAR, -1, GETDATE())  -- Filter for the last year
GROUP BY p.category;



/*
Write a query to return all customers who made purchases in 2023 and are located in the "West" region

*/

SELECT DISTINCT 
    c.customer_name
FROM Sales s
JOIN Customers c ON s.customer_id = c.customer_id
WHERE YEAR(s.sale_date) = 2023
  AND c.sales_region = 'West';



  /*
  Write a query to display the total number of sales, total quantity sold,
  and total revenue for each customer. The result should include the customer_name,
  total sales, total quantity, and total revenue.*/

  SELECT 
    c.customer_name, 
    COUNT(s.sales_id) AS total_sales, 
    SUM(s.quantity) AS total_quantity, 
    SUM(s.total_amount) AS total_revenue
FROM Sales s
JOIN Customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_name;


/*
Write a query to find the top 3 customers (by total revenue) in the year 2023.*/

SELECT TOP 3
    c.customer_name, 
    SUM(s.total_amount) AS total_revenue
FROM Sales s
JOIN Customers c ON s.customer_id = c.customer_id
WHERE YEAR(s.sale_date) = 2023
GROUP BY c.customer_name
ORDER BY total_revenue DESC;


/*
Write a query to rank products by their total sales quantity in 2023. 
The result should include the product_name, total quantity sold, and rank.*/


SELECT 
    p.product_name,
    SUM(s.quantity) AS total_quantity_sold,
    RANK() OVER (ORDER BY SUM(s.quantity) DESC) AS rank
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
WHERE YEAR(s.sale_date) = 2023
GROUP BY p.product_name
ORDER BY rank;



/*
Write a query that categorizes customers into "New" (if they signed up in the last 6 months)
or "Existing" based on their sign_up_date. Include the customer_name, region,
and category in the result.*/

SELECT 
    customer_name,
    sales_region,
    CASE 
        WHEN sign_up_date >= DATEADD(MONTH, -6, GETDATE()) THEN 'New'
        ELSE 'Existing'
    END AS customer_category
FROM Customers;



/*
Write a query to return the month and year along with the total sales for each month for the last 12 months*/

SELECT 
    FORMAT(sale_date, 'yyyy-MM') AS month_year,
    SUM(total_amount) AS total_sales
FROM Sales
WHERE sale_date >= DATEADD(MONTH, -12, GETDATE())
GROUP BY FORMAT(sale_date, 'yyyy-MM')
ORDER BY month_year DESC;




/*
Write a query to return the product categories that generated more than $50,000 in revenue during the last 6 months.*/

SELECT 
    P.category,
    SUM(S.total_amount) AS total_revenue
FROM 
    Sales S
INNER JOIN 
    Products P
ON 
    S.product_id = P.product_id
WHERE 
    S.sale_date >= DATEADD(MONTH, -6, GETDATE())
GROUP BY 
    P.category;
---Write a query to check for any sales where the total_amount doesn’t match the expected value (i.e., quantity * price).

SELECT 
    S.sales_id,
    S.product_id,
    S.quantity,
    S.total_amount,
    (S.quantity * P.price) AS expected_amount
FROM 
    Sales S
INNER JOIN 
    Products P
ON 
    S.product_id = P.product_id
WHERE 
    S.total_amount != (S.quantity * P.price); -- Identify mismatched total amounts






















